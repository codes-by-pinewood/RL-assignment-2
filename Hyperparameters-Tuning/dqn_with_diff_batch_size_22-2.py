# -*- coding: utf-8 -*-
"""dqn_with_diff_batch_size-22.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RJlanqJOE6km9Qdgf5wnjLpgyF6Fx31j
"""

import gym
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import random
import matplotlib.pyplot as plt
import requests
import numpy as np

class Replaybuffer:
    def __init__(self,n_state,n_action, batchsize):
        self.n_state = n_state
        self.n_action = n_action
        self.size = 2000 #size of replay buffer
        self.batchsize = batchsize

        #initialise batches
        self.s = np.empty(shape = (self.size, self.n_state), dtype=np.float32)
        self.a = np.random.randint(low=0, high=n_action, size=self.size, dtype=np.uint8)
        self.r = np.empty(self.size, dtype=np.float32)
        self.done = np.random.randint(low=0, high=2, size=self.size, dtype=np.uint8)
        self.s_ = np.empty(shape = (self.size, self.n_state), dtype=np.float32)

        self.t = 0
        self.tmax = 0  # initalise tmax

    def add_memo(self,s,a,r,done,s_): #add to replay buffer
        self.s[self.t] = s
        self.a[self.t] = a
        self.r[self.t] = r
        self.done[self.t] = done
        self.s_[self.t] = s_
        self.t = self.t + 1 if self.t + 1 < self.size else 1 #if more than 2001, then reset to 1
        self.tmax = max(self.tmax, self.t +1)



    def sample(self):

        if self.tmax > self.batchsize:
           k = self.batchsize  # if greater than batch size, take batch size number of elements
        else:
           k = self.tmax  # else take tmax number of elements

        idxes = random.sample(range(0, self.tmax), k)

        batch_s = []
        batch_a = []
        batch_r = []
        batch_done = []
        batch_s_ = []

        for idx in idxes: #extract data
            batch_s.append(self.s[idx])
            batch_a.append(self.a[idx])
            batch_r.append(self.r[idx])
            batch_done.append(self.done[idx])
            batch_s_.append(self.s_[idx])

        #convert numpy to torch tensors
        batch_s = torch.as_tensor(np.asarray(batch_s),dtype=torch.float32)
        batch_a = torch.as_tensor(np.asarray(batch_a),dtype=torch.int64).unsqueeze(-1) #Dim from (2,) to (2,1)
        batch_r = torch.as_tensor(np.asarray(batch_r),dtype=torch.float32).unsqueeze(-1)
        batch_done = torch.as_tensor(np.asarray(batch_done),dtype=torch.float32).unsqueeze(-1)
        batch_s_ = torch.as_tensor(np.asarray(batch_s_),dtype=torch.float32)

        return batch_s, batch_a, batch_r, batch_done, batch_s_

class Qnetwork(nn.Module):
      def __init__(self, n_input, n_output):
          super().__init__() #initialise module

          self.net = nn.Sequential(
              nn.Linear(in_features= n_input, out_features = 128),
              nn.ReLU(),
              nn.Linear(in_features= 128, out_features = n_output))

      def forward(self,x):
           return self.net(x) #forward propagation

      def act(self,obs): #with obs get max q val and corresponding action
          obs_tensor = torch.as_tensor(obs, dtype=torch.float32)
          q_value = self(obs_tensor.unsqueeze(0)) #convert to row vector
          max_q_idx = torch.argmax(input=q_value)
          action = max_q_idx.detach().item() #get action corresponding to max q val
          return action


class AgentwRB:
   def __init__(self, n_input, n_output,  batchsize, Gamma=0.97, learning_rate = 0.01):
            self.n_input = n_input
            self.n_output = n_output
            self.learning_rate = learning_rate
            self.Gamma = Gamma
            self.batchsize = batchsize
            self.memo = Replaybuffer(self.n_input, self.n_output, self.batchsize)

            #initialise online network and target network
            self.online_net = Qnetwork(self.n_input, self.n_output)
            self.target_net = Qnetwork(self.n_input, self.n_output)

            self.optimizer = torch.optim.Adam(self.online_net.parameters(),lr=self.learning_rate)

def run(env, agent, epsilon_decay, epsilon_start, epsilon_end, n_step, n_episode, target_update, learning_rate):
  episode_array = []
  rewards_array = []
  Reward_list = np.empty(shape=n_episode)

  s = env.reset()
  for episode in range(n_episode):
    epi_reward = 0
    for step in range(n_step):
        'epsilon greedy with decay of epsilon'
        epsilon = np.interp(episode * n_step + step, [0, epsilon_decay], [epsilon_start, epsilon_end])

        random_sample = random.random()
        if random_sample <= epsilon:
           a = env.action_space.sample()
        else:
           a = agent.online_net.act(s)

        'Interact with the env'
        s_, r, done, _ = env.step(a) #get next state, reward, done, info
        agent.memo.add_memo(s, a, r, done, s_) #add to replay buffer
        s = s_ #update state
        epi_reward += r

        if done:
           s = env.reset()
           Reward_list[episode] = epi_reward #store episode reward
           break

        '''Sample minibatches from the transition'''
        batch_s, batch_a, batch_r, batch_done, batch_s_ = agent.memo.sample()

        '''Compute Q_target'''
        target_q_values = agent.target_net(batch_s_)
        target_q = batch_r + agent.Gamma * (1-batch_done) * target_q_values.max(dim=1, keepdim=True)[0]
        '''Compute Q_pred'''
        pred_q_values = agent.online_net(batch_s)
        pred_q = torch.gather(input=pred_q_values, dim=1, index=batch_a)

        '''Compute Loss, gredient descent'''
        loss = nn.functional.smooth_l1_loss(target_q, pred_q)
        agent.optimizer.zero_grad()
        loss.backward()
        agent.optimizer.step() #compute descent according to gradient

        '''Fix Q-target'''
    if episode % TARGET_UPDATE ==0:
        agent.target_net.load_state_dict(agent.online_net.state_dict())
        reward = np.mean(Reward_list[episode-10:episode])
        print("Episode:{}".format(episode))
        print("Reward:{}".format(reward))
        episode_array.append(episode)
        rewards_array.append(reward)
  return episode_array, rewards_array

def plot(episode_array, rewards_array, episode2_array, rewards2_array, episode3_array, rewards3_array, episode4_array, rewards4_array):
  plt.title("Performance of DQN with varying batch sizes")
  plt.plot(episode_array, rewards_array, label = "Batch size 5")
  plt.plot(episode2_array, rewards2_array, label = "Batch size 10")
  plt.plot(episode3_array, rewards3_array, label = "Batch size 32")
  plt.plot(episode4_array, rewards4_array, label = "Batch size 64")
  plt.xlabel("Episodes")
  plt.ylabel("Rewards")

  plt.legend()
  plt.show()

def main():

  env = gym.make('CartPole-v1')
  np.random.seed(42)
  n_input = env.observation_space.shape[0]
  n_output = env.action_space.n

  #default parameters
  epsilon_decay = 10000
  epsilon_start = 1.0 #best value from tuning hyperparameters
  epsilon_end = 0.1
  n_step = 500
  n_episode = 1000
  target_update = 10
  Gamma=0.97
  learning_rate = 0.01

  ##BATCH SIZE 5
  agent = AgentwRB(n_input, n_output, 5)

  episode_array, rewards_array = run(env, agent, epsilon_decay, epsilon_start, epsilon_end, n_step, n_episode, target_update, learning_rate)

  ##BATCH SIZE 10

  agent = AgentwRB(n_input, n_output, 10)

  episode2_array, rewards2_array = run(env, agent, epsilon_decay, epsilon_start, epsilon_end, n_step, n_episode, target_update, learning_rate)

  ##BATCH SIZE 32

  agent = AgentwRB(n_input, n_output, 32)

  episode3_array, rewards3_array = run(env, agent, epsilon_decay, epsilon_start, epsilon_end, n_step, n_episode, target_update, learning_rate)

  ##BATCH SIZE 64

  agent = AgentwRB(n_input, n_output, 64)

  episode4_array, rewards4_array = run(env, agent, epsilon_decay, epsilon_start, epsilon_end, n_step, n_episode, target_update, learning_rate)


  plot(episode_array, rewards_array, episode2_array, rewards2_array, episode3_array, rewards3_array,episode4_array, rewards4_array)


if __name__ == "__main__":
  main()